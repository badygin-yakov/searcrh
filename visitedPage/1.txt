tm
feed
https
tmfeed
ru
utm_source
tm_habrahabr
utm_medium
tm_top_panel
utm_campaign
tm_promo
хабрахабра
https
habrahabr
ru
utm_source
tm_habrahabr
utm_medium
tm_top_panel
utm_campaign
tm_promo
geektimes
https
geektimes
ru
utm_source
tm_habrahabr
utm_medium
tm_top_panel
utm_campaign
tm_promo
тостер
https
toster
ru
utm_source
tm_habrahabr
utm_medium
tm_top_panel
utm_campaign
tm_promo
мой
круг
https
moikrug
ru
utm_source
tm_habrahabr
utm_medium
tm_top_panel
utm_campaign
tm_promo
фрилансить
https
freelansim
ru
utm_source
tm_habrahabr
utm_medium
tm_top_panel
utm_campaign
tm_promo
мегапост
хабрахабра
публикация
пользователь
users
хаба
hubs
компания
companies
песочница
sandbox
войти
https
habrahabr
ru
auth
login
регистрация
https
habrahabr
ru
auth
register
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c
png
igmat
https
habrahabr
ru
users
igmat
автор
публикация
11
апрель
в
18
01
tdd
ошибочно
управление
проект
https
habrahabr
ru
hub
pm
вы
не
подписать
на
этот
хаб
программирование
https
habrahabr
ru
hub
programming
вы
не
подписать
на
этот
хаб
tdd
https
habrahabr
ru
hub
tdd
вы
не
подписать
на
этот
хаб
javascript
https
habrahabr
ru
hub
javascript
вы
не
подписать
на
этот
хаб
из
песочница
sandbox
перейти
в
песочница
disclaimer
вы
попасться
на
clickbait
очевидно
что
tdd
нельзя
назвать
ошибочный
но
всегда
есть
какой
то
_но_
содержание
вступление
тест
и
есть
проблема
немного
история
небольшой
викторин
обзор
tdd
тест
это
формализованный
требование
tdd
поощрять
хороший
архитектура
tdd
экономить
время
тест
это
хороший
документация
немного
вывод
в
что
же
решение
несколько
пример
немного
про
план
вступление
один
шесть
год
свой
карьера
я
фрилансить
и
участвовать
в
начальный
этап
жизнь
мелкий
стартап
в
этот
проект
не
быть
тест
реально
ни
единый
в
этот
условие
ты
обязать
реализовать
фич
на
_вчера_
поскольку
требование
рынок
постоянно
меняться
тест
устаревать
ещё
до
тот
как
ты
они
заканчивать
и
даже
этот
тест
можно
создать
только
если
ты
уверенный
в
тот
что
именно
ты
хотеть
создать
а
это
не
всегда
так
заниматься
r
d
ты
вполне
мочь
не
знать
каков
должный
быть
конечный
результат
и
даже
достигать
определённый
успех
ты
не
мочь
быть
уверенный
что
завтра
рынок
а
с
он
и
требование
не
измениться
в
целое
существовать
бизнес
причина
для
экономия
время
на
тестирование
согласный
наш
отрасль
это
не
только
стартап
около
два
год
назад
я
устроиться
в
достаточно
большой
аутсорсинг
компания
который
обслуживать
клиент
любой
размер
в
время
разговор
на
кухня
курилка
я
обнаружить
что
практически
весь
согласный
с
тем
что
юнит
тестирование
и
tdd
это
свой
род
_best
practice_
но
в
весь
проект
этот
компания
в
который
я
участвовать
не
быть
тест
и
нет
не
я
принимать
такой
решение
конечно
же
у
мы
есть
проект
с
отличный
покрытие
тест
но
они
ещё
и
довольно
сильно
бюрократизировать
_так
в
что
же
проблема
_
почему
весь
соглашаться
что
tdd
это
хорошо
но
никто
не
хотеть
он
применять
мочь
tdd
ошибочно
нет
возможно
в
он
нет
никакой
выгода
для
бизнес
и
опять
нет
мочь
просто
разработчик
ленивый
да
но
это
не
причина
проблема
в
сам
тест
я
понимать
что
звучать
это
странно
но
я
попытаться
это
доказать
тест
и
есть
проблема
исходить
из
это
исследование
https
stateofjs
com
наименьший
общий
удовлетворённость
в
весь
экосистема
принадлежать
именно
инструмент
для
тестирование
так
быть
в
2016
и
2017
год
я
не
найти
более
ранний
исследование
но
это
уже
не
очень
важный
немного
история
в
2008
год
выйти
один
из
один
js
фреймворок
для
тестирование
qunit
https
qunitjs
com
в
2010
появиться
jasmine
https
jasmine
github
io
в
2011
mocha
https
mochajs
org
один
релиз
jest
https
facebook
github
io
jest
который
я
найти
быть
в
2014
timeline
for
test
tools
https
habrastorage
org
webt
wl
9x
au
wl9xauu8wuumaeon5v6yojhsbdw
png
для
сравнение
в
2010
зарелизиться
angular
js
https
angularjs
org
ember
https
www
emberjs
com
появиться
в
2011
react
https
reactjs
org
2013
и
так
далее
в
время
написание
этот
статья
не
быть
создать
ни
один
js
фреймворк
в
всякий
случай
я
timeline
for
frameworks
and
libraries
https
habrastorage
org
webt
da
qc
1r
daqc1rprmo_jf8e3ggywkykuiq0
png
за
этот
же
период
время
мы
увидеть
взлёт
и
падение
grunt
https
gruntjs
com
потом
gulp
https
gulpjs
com
после
что
осознать
весь
мощь
npm
scripts
https
docs
npmjs
com
misc
scripts
и
выйти
в
свет
стабильный
релиз
webpack
https
webpack
js
org
timeline
for
tooling
https
habrastorage
org
webt
ee
ok
t2
eeokt2eghp24onwrqyhzssejmu0
png
весь
поменяться
за
последний
10
год
весь
кроме
тестирование
небольшой
викторин
давать
проверить
ваш
знание
что
это
за
библиотека
фреймворка
1
var
hiddenbox
banner
message
button
container
button
on
click
function
event
hiddenbox
show
2
component
selector
app
heroes
templateurl
heroes
component
html
styleurls
heroes
component
css
export
class
heroescomponent
hero
hero
id
1
name
windstorm
constructor
3
function
avatar
props
return
img
classname
avatar
src
props
user
avatarurl
alt
props
user
name
ответ
1
jquery
https
jquery
com
2
angular2
https
angular
io
3
react
https
reactjs
org
хорошо
я
уверенный
что
весь
ваш
ответ
быть
верный
но
что
на
счёт
этот
фреймворок
для
тестирование
1
var
assert
require
assert
describe
array
function
describe
indexof
function
it
should
return
1
when
the
value
is
not
present
function
assert
equal
1
2
3
indexof
4
1
2
const
sum
require
sum
test
adds
1
2
to
equal
3
expect
sum
1
2
tobe
3
3
test
timing
test
function
t
t
plan
2
t
equal
typeof
date
now
function
var
start
date
now
settimeout
function
t
equal
date
now
start
100
100
4
let
when2isaddedto2expect4
assert
areequal
4
2
2
ответ
1
mocha
https
mochajs
org
2
jest
https
facebook
github
io
jest
3
tape
https
github
com
substack
tape
4
тест
для
f
http
fsharp
org
вы
мочь
угадать
некоторый
из
они
но
в
целое
они
весь
очень
похожий
заметить
что
даже
при
смена
язык
мало
что
меняться
у
мы
есть
как
минимум
8
год
опыт
юнит
тестирование
в
мир
javascript
а
но
мы
ведь
просто
адаптировать
уже
существующий
на
тот
момент
юнит
тестирование
как
мы
он
знать
появиться
намного
ранний
если
взять
релиз
test
anything
protocol
https
en
wikipedia
org
wiki
test_anything_protocol
1987
как
точка
отсчёт
то
мы
использовать
текущий
подход
долгий
чем
я
жить
tdd
https
en
wikipedia
org
wiki
test
driven_development
ненамного
молодой
если
не
старший
https
www
quora
com
why
does
kent
beck
refer
to
the
rediscovery
of
test
driven
development
whats
the
history
of
test
driven
development
before
kent
becks
rediscovery
весь
это
приводить
мы
к
тот
что
мы
уже
мочь
объективно
оценить
весь
плюс
и
минус
обзор
tdd
давать
вспомнить
что
такой
tdd
разработка
через
тестирование
англ
test
driven
development
tdd
техника
разработка
программный
обеспечение
который
основываться
на
повторение
очень
короткий
цикл
разработка
сначала
писаться
тест
покрывать
желаемый
изменение
затем
писаться
код
который
позволить
пройти
тест
и
под
конец
проводиться
рефакторинг
новое
код
к
соответствующий
стандарт
с
википедия
https
ru
wikipedia
org
wiki
d0
a0
d0
b0
d0
b7
d1
80
d0
b0
d0
b1
d0
be
d1
82
d0
ba
d0
b0_
d1
87
d0
b5
d1
80
d0
b5
d0
b7_
d1
82
d0
b5
d1
81
d1
82
d0
b8
d1
80
d0
be
d0
b2
d0
b0
d0
bd
d0
b8
d0
b5
tdd
cycle
https
habrastorage
org
webt
hq
qb
e9
hqqbe9zyz1ckivuwq_p1cqth3og
png
но
что
это
мы
давать
тест
это
формализованный
требование
это
правда
только
частично
tdd
как
практика
быть
_
переизобрести
_
кент
бек
в
1999
год
в
то
время
как
agile
manifesto
http
agilemanifesto
org
быть
принять
только
2
год
спустя
в
2001
я
должный
это
подчеркнуть
что
бы
вы
понять
что
tdd
родиться
в
золотой
век
каскадный
модель
https
ru
wikipedia
org
wiki
d0
9a
d0
b0
d1
81
d0
ba
d0
b0
d0
b4
d0
bd
d0
b0
d1
8f_
d0
bc
d0
be
d0
b4
d0
b5
d0
bb
d1
8c
и
этот
факт
определять
наиболее
благоприятный
условие
и
процесс
для
который
он
и
быть
спроектировать
очевидно
что
tdd
быть
хороший
всего
работать
именно
в
такой
условие
так
что
если
вы
работать
в
проект
где
1
требование
ясный
2
вы
полностью
они
понимать
3
они
стабильный
и
не
быть
часто
меняться
вы
мочь
создавать
тест
как
формализация
требование
но
что
бы
использовать
_существующие_
тест
такой
же
образ
необходимый
выполнение
и
следующий
пункт
тоже
1
в
тест
нет
ошибка
2
они
актуальный
3
и
они
покрывать
почти
весь
сценарий
использование
не
путать
с
покрытие
код
так
что
тест
это
формализованный
требование
правда
только
тогда
когда
этот
требование
существовать
_до_
начало
самый
разработка
как
в
модель
водопад
или
проект
nasa
https
www
nasa
gov
где
клиент
это
учёный
и
инженер
в
определённый
условие
это
быть
работать
и
с
agile
процесс
особенно
если
что
нибыть
по
тип
bdd
https
en
wikipedia
org
wiki
behavior
driven_development
быть
использовать
но
это
уже
совсем
другой
история
tdd
поощрять
хороший
архитектура
и
опять
это
правда
только
частично
tdd
поощрять
модульность
что
необходимый
но
недостаточно
для
хорошеть
архитектура
качество
архитектура
зависеть
от
разработчик
опытный
разработчик
способный
создавать
отличный
код
несмотря
на
использование
или
неиспользование
юнит
тестирование
с
другой
сторона
слабый
разработчик
быть
создавать
низкокачественный
код
покрыть
низкокачественный
тест
потому
что
создание
хороший
тест
это
свой
род
искусство
как
и
сам
программирование
конечно
тест
как
секс
хороший
плохой
чем
никакой
вовсе
но
этот
тест
никак
не
продвинуть
вы
на
путь
к
хороший
дизайн
система
import
inject
testbed
from
angular
core
testing
import
uploaderservice
from
uploader
service
describe
uploaderservice
beforeeach
testbed
configuretestingmodule
providers
uploaderservice
it
should
be
created
inject
uploaderservice
service
uploaderservice
expect
service
tobetruthy
потому
что
он
ничто
не
тестировать
обратить
внимание
мы
использовать
15
строка
код
чтобы
ничто
не
протестировать
но
и
этот
тест
не
сделать
дизайн
ваш
система
хороший
var
iotsimulation
artifacts
require
iotsimulation
sol
var
smartasset
artifacts
require
smartasset
sol
var
buysmartasset
artifacts
require
buysmartasset
sol
var
bigint
require
big
integer
contract
buysmartasset
function
accounts
it
should
sell
asset
async
var
deliverycity
lublin
var
extra
1000
var
gasprice
100000000000
const
smartasset
await
smartasset
deployed
const
iotsimulation
await
iotsimulation
deployed
const
buysmartasset
await
buysmartasset
deployed
const
result
await
smartasset
createasset
date
now
200
docurl
1
email
email1
com
audi
a8
vin02
black
2500
car
const
smartassetgeneratedid
result
logs
0
args
id
c
0
await
iotsimulation
generateiotoutput
smartassetgeneratedid
0
await
iotsimulation
generateiotavailability
smartassetgeneratedid
true
await
smartasset
calculateassetprice
smartassetgeneratedid
const
assetobjprice
await
smartasset
getsmartassetprice
smartassetgeneratedid
assert
isabove
parseint
assetobjprice
0
price
should
be
bigger
than
0
await
smartasset
makeonsale
smartassetgeneratedid
var
assetobj
await
smartasset
getassetbyid
call
smartassetgeneratedid
assert
equal
assetobj
9
3
state
should
be
onsale
position
3
in
state
enum
list
await
smartasset
makeoffsale
smartassetgeneratedid
assetobj
await
smartasset
getassetbyid
call
smartassetgeneratedid
assert
equal
assetobj
9
2
state
should
be
pricecalculated
position
2
in
state
enum
list
await
smartasset
makeonsale
smartassetgeneratedid
const
calculatedtotalprice
await
buysmartasset
gettotalprice
call
smartassetgeneratedid
112
223
await
buysmartasset
buyasset
smartassetgeneratedid
112
223
from
accounts
1
value
bigint
calculatedtotalprice
tostring
add
bigint
extra
assetobj
await
smartasset
getassetbyid
call
smartassetgeneratedid
assert
equal
assetobj
9
0
state
should
be
manualdataareentered
position
0
in
state
enum
list
assert
equal
assetobj
10
accounts
1
const
balancebeforewithdrawal
await
web3
eth
getbalance
accounts
1
const
gas
await
buysmartasset
withdrawpayments
estimategas
from
accounts
1
await
buysmartasset
withdrawpayments
from
accounts
1
gasprice
gasprice
const
balanceafterwithdrawal
await
web3
eth
getbalance
accounts
1
var
totalgas
gas
gasprice
assert
isok
bigint
balanceafterwithdrawal
tostring
add
bigint
totalgas
eq
bigint
balancebeforewithdrawal
tostring
add
bigint
extra
наибольший
проблема
это
тест
это
изначальный
кодовый
база
но
даже
в
такой
случай
он
можно
быть
существенно
улучшить
даже
без
рефакторинг
уже
работать
проект
вообще
влияние
tdd
на
итоговый
архитектура
приблизительно
на
тот
же
уровень
что
и
влияние
выбрать
библиотека
фреймворка
если
не
маленький
например
nest
https
nestjs
com
rxjs
https
github
com
reactive
extensions
rxjs
и
mobx
https
github
com
mobxjs
mobx
по
мой
личный
мнение
влиять
существенно
сильный
но
ни
tdd
ни
фреймворка
не
спасти
от
плохой
код
и
неудачный
архитектурный
решение
не
существовать
серебряный
пуля
tdd
экономить
время
а
это
уже
зависеть
от
многий
фактор
давать
предположим
что
1
весь
в
проект
достаточно
хорошо
владеть
выбрать
тестовый
инструмент
методология
tdd
и
хороший
практика
юнит
тестирование
2
и
весь
понимать
весь
вышеперечисленный
одинаково
3
а
требование
прозрачный
и
стабильный
4
к
тот
же
команда
разработчик
понимать
они
точно
так
же
как
и
product
owner
5
а
менеджмент
готовый
решать
весь
организационный
проблема
вызвать
tdd
например
более
длинный
процесс
ввод
новый
разработчик
в
команда
даже
в
это
случай
вы
необходимый
сначала
инвестировать
время
и
усилие
что
удлинить
начальный
фаза
разработка
и
только
спустя
какой
то
время
вы
получить
выгода
сократить
необходимый
время
на
исправление
ошибка
и
поддержка
продукт
конечно
два
мочь
быть
большой
чем
стартовый
инвестиция
и
в
это
случай
выгода
от
tdd
очевидный
так
же
в
некоторый
случай
вы
смочь
сэкономить
время
и
на
внедрение
новый
функциональность
поскольку
тест
быть
сразу
выявлять
непреднамеренный
изменение
но
в
реальный
мир
который
очень
динамичный
требование
мочь
измениться
и
то
что
быть
корректный
поведение
ранний
стать
некорректный
в
это
случай
вы
необходимый
переписать
тест
в
связь
с
новый
реалия
и
очевидно
приложить
новое
усилие
который
не
окупиться
сразу
же
вы
даже
мочь
попасть
в
цикл
подобный
тип
tdd
cycle
for
changes
wrong
https
habrastorage
org
webt
yx
if
kg
yxifkgntvr_bol9e7np1rmbcffm
png
ладный
этот
цикл
противоречить
принцип
tdd
но
следующий
уже
нет
tdd
cycle
for
changes
right
https
habrastorage
org
webt
8k
sg
id
8ksgidbqb
g8wzrxrxfsvmfta6e
png
попробовать
найти
в
они
значимый
различие
тест
это
хороший
документация
нет
они
хороший
в
это
но
однозначно
не
хороший
давать
взглянуть
на
документация
angular
https
angular
io
docs
angular
docs
screenshot
https
habrastorage
org
webt
k2
5n
6l
k25n6lvqyqh
8qurzhgaps_u1os
png
или
react
https
reactjs
org
docs
react
docs
screenshot
https
habrastorage
org
webt
4q
4t
oo
4q4toovrug3vt4_fj
9nc_jimu4
png
как
вы
думать
что
в
они
общий
они
оба
построить
на
пример
код
и
даже
более
тот
весь
этот
пример
можно
легко
запустить
angular
использовать
stackblitz
https
stackblitz
com
а
react
codepen
https
codepen
io
так
что
вы
мочь
увидеть
что
оно
давать
на
выход
и
что
произойти
если
вы
что
то
изменить
конечно
же
там
так
же
есть
и
простой
текст
но
это
как
комментарий
в
код
они
вы
нужный
только
если
вы
что
то
не
понять
из
самый
код
_
исполняемый
пример
код
_
вот
хороший
документация
тест
близкий
к
это
но
недостаточно
describe
reacttypescriptclass
function
beforeeach
function
container
document
createelement
div
attachedlistener
null
renderedname
null
it
preserves
the
name
of
the
class
for
use
in
error
messages
function
expect
empty
name
tobe
empty
it
throws
if
no
render
function
is
defined
function
expect
expect
reactdom
render
react
createelement
empty
container
tothrow
towarndev
a
failed
component
renders
twice
in
dev
warning
empty
no
render
method
found
on
the
returned
component
instance
you
may
have
forgotten
to
define
render
warning
empty
no
render
method
found
on
the
returned
component
instance
you
may
have
forgotten
to
define
render
это
небольшой
кусочек
из
реальный
тест
в
react
https
github
com
facebook
react
blob
master
packages
react
src
__tests__
reacttypescriptclass
test
ts
мы
мочь
выделить
пример
код
из
он
container
document
createelement
div
empty
name
container
document
createelement
div
reactdom
render
react
createelement
empty
container
весь
остальной
это
вручную
написать
инфраструктурный
код
давать
быть
честной
пример
тест
выше
намного
менее
читабельный
чем
настоящий
документация
и
проблема
не
в
это
конкретный
тест
я
уверенный
что
ребята
из
facebook
https
www
facebook
com
знать
как
писать
хороший
код
и
хороший
тест
весь
этот
мусор
из
инструмент
тестирование
и
assertion
библиотека
как
it
describe
test
to
be
true
просто
захламлять
ваш
тест
кстати
есть
библиотека
который
называться
tape
https
github
com
substack
tape
с
минималистичный
api
потому
что
люба
тест
можно
переписать
использовать
только
equal
deepequal
а
думать
в
этот
термин
это
в
целое
хороший
практика
для
юнит
тестирование
но
даже
тест
для
tape
ещё
очень
далеко
до
просто
исполняемый
пример
код
но
стоить
заметить
что
тест
весь
ещё
вполне
пригодный
для
использование
в
качество
документация
у
они
действительно
ниже
вероятность
быть
устаревший
а
наш
сознание
просто
выкидывать
лишний
когда
мы
они
читаемый
если
мы
попробовать
визуализировать
то
в
что
превращаться
тест
в
наш
голов
то
это
быть
выглядеть
приблизительно
так
test
as
doc
example
https
habrastorage
org
webt
o7
55
bl
o755blk9mpgmxy9bsun1ttqx9za
png
как
вы
видеть
это
уже
намного
близкий
к
реальный
док
чем
изначальный
тест
немного
вывод
1
тест
это
формализованный
требование
если
они
стабильный
2
tdd
поощрять
хороший
архитектура
если
разработчик
достаточно
квалифицировать
3
tdd
экономить
время
если
вы
он
вложить
сначала
4
тест
это
хороший
документация
если
нет
другой
исполняемый
пример
код
значит
tdd
весь
таки
ошибочно
нет
tdd
не
ошибочно
оно
указывать
правильно
направление
и
поднимать
важный
вопрос
мы
просто
должный
переосмыслить
и
изменить
способ
он
применение
в
что
же
решение
не
воспринимать
tdd
как
серебряный
пуля
не
воспринимать
он
даже
как
процесс
по
тип
agile
например
вместо
это
сфокусироваться
на
он
реальный
сильный
сторона
1
предотвращение
непреднамеренный
изменение
другой
слово
фиксирование
существующий
поведение
как
свой
род
базовый
линия
англ
термин
baseline
мы
ещё
пригодиться
2
использование
пример
из
документация
как
тест
думать
о
юнит
тестирование
как
о
инструмент
разработчик
как
линтер
https
eslint
org
или
компилятор
https
www
typescriptlang
org
например
вы
не
быть
спрашивать
у
product
owner
а
разрешение
на
использование
линтер
вы
просто
быть
он
использовать
когда
нибыть
это
стать
реальность
и
для
юнит
тестирование
когда
необходимый
для
tdd
усилие
быть
на
уровень
использование
тайпчекер
https
flow
org
или
бандлера
https
webpack
js
org
но
до
это
момент
просто
минимизировать
свой
затрата
создавать
тест
максимально
похожий
на
исполняемый
пример
и
использовать
они
как
текущий
baseline
состояние
ваш
проект
я
понимать
что
это
быть
сложно
особенно
учитывать
тот
факт
что
большинство
популярный
инструмент
спроектировать
для
другой
цель
правда
я
создать
один
такой
брать
в
внимание
весь
вышеописанный
проблема
он
называться
baset
https
habrastorage
org
webt
ba
oj
el
baojelyc8huvom1s0mfmz4dm7a8
png
https
github
com
igmat
baset
базовый
концепция
очень
простой
писать
код
export
function
samplefn
a
any
b
any
return
a
b
b
a
и
просто
использовать
он
в
ваш
тест
import
samplefn
from
index
export
values
samplefn
1
1
samplefn
1000000
1000000
samplefn
abc
cba
samplefn
1
abc
samplefn
abc
1
new
promise
resolve
resolve
samplefn
async
value
1
note
тест
конечно
же
очень
синтетический
просто
для
демонстрация
потом
выполнять
команда
baset
test
и
получать
временный
baseline
values
4
4000000
abccbacbaabc
1abcabc1
abc11abc
async
value11async
value
если
значение
верный
выполнять
baset
accept
и
коммитит
создать
baseline
в
ваш
репозиторий
весь
последующий
прогонка
тест
быть
сравнивать
существующий
baseline
с
значение
экспортировать
из
ваш
тест
если
они
отличаться
тест
_провален_
иначе
_пройден_
если
требование
измениться
просто
изменить
код
прогнать
тест
и
принять
новый
baseline
этот
инструмент
весь
ещё
оберегать
вы
от
непреднамеренный
изменение
при
это
требовать
минимальный
усилие
весь
что
вы
нужно
это
просто
написать
исполняемый
пример
код
который
к
тот
же
являться
основа
хорошеть
документация
несколько
пример
использование
с
react
вот
этот
тест
import
as
react
from
react
import
jsxfn
from
index
export
const
value
div
jsxfn
s
s
jsxfn
abc
cba
jsxfn
s
abc
jsxfn
abc
s
div
создать
такой
md
файл
как
baseline
exports
value
div
data
reactroot
div
class
csscalss
ss
div
div
class
csscalss
abccba
div
div
class
csscalss
sabc
div
div
class
csscalss
abcs
div
div
или
с
pixi
js
http
www
pixijs
com
import
pixi
js
interface
iresourcedictionary
index
string
pixi
loaders
resource
const
assets
assets
assets
json
const
radar_green
light_green
const
getsprite
async
await
new
promise
resolve
pixi
loader
add
assets
load
resolve
return
new
pixi
sprite
pixi
utils
texturecache
radar_green
export
const
sprite
getsprite
этот
тест
создать
такой
baseline
exports
sprite
exports
sprite
https
habrastorage
org
webt
j7
fh
db
j7fhdb4xuoida6mgdpf1blbo9ou
png
немного
про
план
я
обязать
сказать
что
этот
инструмент
ещё
на
очень
ранний
стадия
разработка
и
впереди
ещё
очень
много
нововведение
https
github
com
igmat
baset
milestone
1
например
1
watch
workflow
mode
https
github
com
igmat
baset
issues
65
2
tap
compatibility
https
github
com
igmat
baset
issues
55
3
git
acceptance
strategy
https
github
com
igmat
baset
issues
69
4
vs
code
extension
https
github
com
igmat
baset
issues
74
5
и
как
минимум
24
другой
только
около
40
от
запланировать
быть
реализовать
но
весь
базовый
функциональность
уже
работать
так
что
мочь
попробовать
поиграться
с
она
мочь
быть
вы
даже
понравиться
кто
знать
метка
javascript
https
habrahabr
ru
search
q
5bjavascript
5d
target_type
posts
tdd
https
habrahabr
ru
search
q
5btdd
5d
target_type
posts
unit
testing
https
habrahabr
ru
search
q
5bunit
testing
5d
target_type
posts
tools
https
habrahabr
ru
search
q
5btools
5d
target_type
posts
js
tools
https
habrahabr
ru
search
q
5bjs
20tools
5d
target_type
posts
testing
tools
https
habrahabr
ru
search
q
5btesting
20tools
5d
target_type
posts
добавить
метка
пометить
публикация
свой
метка
метка
необходимый
разделять
запятая
например
_php
javascript
андронный
коллайдер
задача
три
тел_
сохранить
adblock
похитить
этот
баннер
но
баннер
не
зуб
отрасти
дробный
https
u
tmtm
ru
tmtalkadblock
реклама
https
tmtm
ru
services
advertising
читать
сейчас
не
защищать
сайт
от
скрапинга
сопротивление
бесполезный
https
habrahabr
ru
post
353348
8
7k
63
https
habrahabr
ru
post
353348
comments
и
ты
посчитать
в
россия
грясти
всеобщий
маркировка
товар
https
habrahabr
ru
company
pilot
blog
353344
6
2k
33
https
habrahabr
ru
company
pilot
blog
353344
comments
riot
games
анатомия
технический
долг
https
habrahabr
ru
post
353346
1
9k
3
https
habrahabr
ru
post
353346
comments
linux
контейнер
изоляция
как
технологический
прорыв
https
habrahabr
ru
company
redhatrussia
blog
352052
5
4k
1
https
habrahabr
ru
company
redhatrussia
blog
352052
comments
флаппи
бёрдо
поехать
https
habrahabr
ru
post
353402
876
0
https
habrahabr
ru
post
353402
comments
кроме
криптовалюта
для
что
ещё
использоваться
блокчейн
https
habrahabr
ru
company
bitfury
blog
353350
3
9k
3
https
habrahabr
ru
company
bitfury
blog
353350
comments
adblock
похитить
этот
баннер
но
баннер
не
зуб
отрасти
дробный
https
u
tmtm
ru
tmtalkadblock
реклама
https
tmtm
ru
services
advertising
54
97
13
6k
47
https
habrahabr
ru
post
353312
comments
выбрать
рекомендация
для
отправка
автор
указанный
только
блог
орфографический
ошибка
пунктуационный
ошибка
отступ
текст
простыня
короткий
предложение
смайлик
много
форматирование
картинка
ссылка
оформление
код
рекламный
характер
отправить
нарушение
описать
быть
нарушение
отправить
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c
png
users
igmat
13
0
карма
info
help
karma
15
голос
43
3
рейтинг
info
help
karma
rating
рейтинг
пользователь
3
подписчик
users
igmat
subscription
followers
количество
подписчик
игорь
чулинда
users
igmat
igmat
users
igmat
пользователь
поделиться
публикация
https
www
facebook
com
sharer
sharer
php
u
https
habrahabr
ru
post
353312
опубликовать
ссылка
в
facebook
https
twitter
com
intent
tweet
text
tdd
d0
be
d1
88
d0
b8
d0
b1
d0
be
d1
87
d0
bd
d0
be
3f
https
habr
ru
p
353312
via
40habrahabr
опубликовать
ссылка
в
twitter
https
vk
com
share
php
url
https
habrahabr
ru
post
353312
опубликовать
ссылка
в
вконтакте
https
t
me
share
url
url
https
habrahabr
ru
post
353312
title
tdd
ошибочно
поделиться
ссылка
в
telegram
https
getpocket
com
edit
url
https
habrahabr
ru
post
353312
title
tdd
ошибочно
добавить
ссылка
в
pocket
похожий
публикация
21
май
2013
в
10
29
автоматизированный
тестирование
веб
приложение
ms
unit
testing
framework
selenium
webdriver
c
часть
2
2
selenium
api
wrapper
webelement
post
180357
8
31
2k
101
7
post
180357
comments
17
май
2013
в
15
07
автоматизированный
тестирование
веб
приложение
ms
unit
testing
framework
selenium
webdriver
c
часть
2
1
selenium
api
wrapper
browser
post
180047
15
41
2k
162
3
post
180047
comments
15
май
2013
в
18
26
автоматизированный
тестирование
веб
приложение
ms
unit
testing
framework
selenium
webdriver
c
часть
1
введение
post
178321
1
48
6k
139
15
post
178321
comments
заказ
http
freelansim
ru
http
freelansim
ru
поправить
код
php
на
wordpress
2
отклик
30
просмотр
1
000
за
проект
http
freelansim
ru
tasks
196821
доработать
сайт
на
yii2
0
отклик
16
просмотр
500
за
час
http
freelansim
ru
tasks
196815
ux
ui
дизайн
ер
для
создание
интерфейс
мобильный
приложение
5
отклик
19
просмотр
10
000
за
проект
http
freelansim
ru
tasks
196809
настроить
шифрование
voip
трафик
на
сервер
с
freeswitch
0
отклик
10
просмотр
500
за
час
http
freelansim
ru
tasks
196807
разработка
по
на
база
stm32
esp32
4
отклик
25
просмотр
100
000
за
проект
http
freelansim
ru
tasks
196803
весь
заказ
http
freelansim
ru
tasks
разместить
заказ
http
freelansim
ru
info
pricing
adblock
похитить
этот
баннер
но
баннер
не
зуб
отрасти
дробный
https
u
tmtm
ru
tmtalkadblock
реклама
https
tmtm
ru
services
advertising
комментарий
47
habrastorage
org
getpro
habr
avatars
306
651
000
306651000e6f1aa26f308aa26d8b36ba_small
jpg
powerman
https
habrahabr
ru
users
powerman
11
04
18
в
21
25
5
я
не
уверенный
что
автоматизация
задание
обновление
результат
тест
хороший
идея
я
немного
с
это
экспериментировать
когда
то
давно
по
мой
наблюдение
если
результат
тест
не
задаваться
человек
вручную
изначально
максимум
копироваться
из
вывод
провалиться
тест
в
тест
проникать
немало
некорректный
ожидать
результат
пытаться
по
diff
ама
понять
правильно
ли
измениться
вон
тот
8
результат
из
42
сложно
требовать
слишком
много
внимание
и
обычно
заканчиваться
принятие
изменение
механически
конечно
существовать
ситуация
когда
такой
подход
не
просто
приемлемый
а
чуть
ли
не
единственно
возможный
когда
дать
слишком
много
и
или
они
практически
невозможно
предсказать
и
задать
вручную
но
это
исключение
а
не
правило
но
в
весь
проект
этот
компания
в
который
я
участвовать
не
быть
тест
и
нет
не
я
принимать
такой
решение
конечно
же
он
принимать
вы
согласиться
работать
на
этот
проект
вообще
и
согласиться
и
писать
свой
код
без
тест
в
частность
я
в
это
отношение
практиковать
жёсткий
политика
если
я
не
давать
нормальный
организовать
на
проект
тестирование
ci
cd
и
фиксить
архитектурный
проблема
я
просто
отказываться
заниматься
в
такой
условие
багфикс
потому
что
если
архитектурный
в
проект
допускаться
возможность
race
condition
и
в
примерно
это
место
происходить
фигня
то
на
расследование
каждый
такой
конкретный
случай
на
предмет
а
не
баг
ли
это
или
просто
архитектурный
особенность
проявиться
уйти
немало
время
причём
зачастую
впустую
и
пусть
время
свой
жизнь
на
такой
бессмысленный
деятельность
тратить
кто
то
другой
кто
на
это
согласный
у
мы
есть
как
минимум
8
год
опыт
юнит
тестирование
в
мир
javascript
а
поскольку
вы
осознанно
сделать
заголовок
статья
такой
какой
сделать
я
тоже
проигнорировать
что
статья
про
js
и
прокомментировать
в
общий
например
на
опыт
go
так
что
тест
это
формализованный
требование
правда
только
тогда
когда
этот
требование
существовать
до
начало
самый
разработка
как
в
модель
водопад
или
проект
nasa
где
клиент
это
учёный
и
инженер
это
не
совсем
так
есть
упомянуть
вы
bdd
но
гораздо
важный
то
что
требование
существовать
на
разный
уровень
если
в
проект
нужный
функция
складывать
два
число
её
требование
не
быть
меняться
а
если
измениться
скорее
всего
это
быть
означать
что
старый
функция
надо
выкинуть
и
написать
новый
при
правильный
определение
небольшой
отдельный
компонент
модуль
библиотека
микросервис
проект
слабо
связанный
с
остальной
требование
к
он
быть
составляться
сам
программист
и
быть
редко
изменяться
из
за
изменение
требование
бизнес
чаща
требование
бизнес
просто
быть
делать
некоторый
из
этот
компонент
ненужный
и
вместо
они
бесконечный
изменение
до
полный
неузнаваемость
относительно
начальный
версия
такой
компонента
быть
просто
выбрасываться
и
заменяться
новый
а
для
тестирование
высокоуровневый
требование
бизнес
есть
bdd
и
за
счёт
реально
высокий
уровень
такой
тест
тоже
получаться
более
стабильный
tdd
экономить
время
а
это
уже
зависеть
от
многий
фактор
весь
раздел
не
очень
корректный
фактор
здесь
только
один
быть
ли
код
поддерживаться
если
это
одноразовый
скрипт
или
простой
прототип
тест
время
не
сэкономить
но
практически
в
весь
остальной
случай
начальный
написание
код
до
он
первое
реальный
изменение
быть
то
вследствие
найти
баг
или
изменить
требование
занимать
незначительный
процент
общий
время
разработка
проект
и
в
этот
условие
тест
всегда
экономить
время
и
значительно
конечно
чтобы
от
тест
быть
польза
надо
уметь
они
писать
но
это
касаться
и
программирование
и
даже
готовка
еда
быть
текущий
проблема
с
тест
в
тот
что
почему
то
считаться
что
люба
программист
автоматически
уметь
писать
тест
а
это
не
так
это
надо
учиться
так
же
как
надо
учиться
писать
под
определённый
ос
на
определённый
язык
фреймворка
бэк
или
фронт
быстро
или
безопасно
etc
исполняемый
пример
код
вот
хороший
документация
тест
близкий
к
это
но
недостаточно
в
go
из
коробка
поддерживаться
тест
который
являться
исполняемый
пример
код
func
example
https
golang
org
pkg
testing
hdr
examples
думать
о
юнит
тестирование
как
о
инструмент
разработчик
как
линтер
или
компилятор
например
это
очень
верно
и
опять
же
в
go
весь
это
так
и
реализовать
компиляция
тестирование
и
даже
линтер
запускаться
один
команда
доступный
сразу
после
установка
самый
go
плюс
ещё
генерация
документация
из
исходник
с
тот
самый
исполняемый
пример
код
весь
остальной
это
вручную
написать
инфраструктурный
код
давать
быть
честной
пример
тест
выше
намного
менее
читабельный
в
go
этот
проблема
обычно
решаться
написание
тест
в
табличный
стиль
https
github
com
golang
go
wiki
tabledriventests
это
тоже
не
серебряный
пуля
но
большинство
тест
в
такой
вид
намного
простой
и
писать
и
читать
потому
что
инфраструктурный
код
полностью
отделить
от
входной
и
выходной
значение
тест
hемного
вывод
1
тест
это
формализованный
требование
если
они
стабильный
2
tdd
поощрять
хороший
архитектура
если
разработчик
достаточно
квалифицировать
3
tdd
экономить
время
если
вы
он
вложить
сначала
4
тест
это
хороший
документация
если
нет
другой
исполняемый
пример
код
1
правильный
декомпозиция
на
небольшой
модуль
обеспечить
этот
стабильность
2
пока
не
существовать
инструмент
который
позволить
бы
неквалифицированный
разработчик
создавать
качественный
продукт
и
вряд
ли
они
когда
нибыть
появиться
3
нет
тест
экономить
время
при
условие
что
проект
надо
развивать
и
поддерживать
4
просто
оформлять
этот
пример
код
так
чтобы
они
можно
быть
автоматически
выполнять
как
тест
как
сделать
в
go
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
01
38
1
1
это
обеспечить
стабильность
код
а
не
требование
чем
выше
уровень
абстракция
конкретный
модуль
тем
сильный
требование
к
он
зависеть
от
требование
бизнес
и
я
не
считать
что
такой
модуль
должный
тестироваться
только
с
помощь
bdd
так
как
для
последний
требоваться
ещё
на
порядок
большой
усилие
включая
организационный
2
да
собственно
о
тот
и
раздел
не
стоить
ожидать
от
tdd
тот
что
оно
не
мочь
дать
3
а
ещё
они
требовать
время
на
поддержка
и
есть
огромный
количество
кейс
когда
вложить
время
на
успевать
отбиться
просто
потому
что
тест
переписываться
весь
время
я
не
говорить
что
это
повод
не
писать
тест
но
это
повод
оптимизировать
время
который
на
они
затрачиваться
4
круто
что
в
go
это
есть
они
коробка
но
в
js
для
это
нужный
инструмент
который
я
представить
считаться
что
люба
программист
автоматически
уметь
писать
тест
а
это
не
так
это
требовать
tdd
тест
писать
разработчик
который
реализовывать
задача
я
согласный
что
писать
правильный
тест
сложно
поэтому
и
предлагать
инструмент
для
который
дополнительный
знание
не
нужный
просто
использовать
код
который
написать
habrastorage
org
getpro
habr
avatars
306
651
000
306651000e6f1aa26f308aa26d8b36ba_small
jpg
powerman
https
habrahabr
ru
users
powerman
12
04
18
в
02
16
1
тест
переписываться
весь
время
это
не
нормальный
и
так
быть
не
должный
время
от
время
такой
допустимый
и
неизбежно
но
если
это
происходить
весь
время
скорее
всего
это
признак
тот
что
разработчик
ещё
не
научиться
нормальный
писать
тест
и
они
получаться
слишком
хрупкий
это
повод
оптимизировать
время
который
на
они
затрачиваться
на
самый
дело
весь
наоборот
многие
относиться
к
тест
как
к
что
то
второсортный
что
можно
делать
в
спешка
на
скорый
рука
и
грязно
проблема
именно
в
это
отношение
тест
это
такой
же
код
они
тоже
надо
писать
достаточно
чисто
рефакторить
местами
даже
продумывать
создавать
для
они
вспомогательный
объект
функция
а
иногда
и
полноценный
библиотека
штатный
на
тест
необходимый
выделять
столько
же
время
сколько
на
написание
основный
код
и
не
надо
это
время
пытаться
оптимизировать
ничто
хороший
это
не
закончиться
это
требовать
tdd
тест
писать
разработчик
который
реализовывать
задача
ну
вы
же
не
поставить
джуниор
писать
ядро
система
потому
что
архитектор
требовать
чтобы
ядро
быть
написать
в
принцип
tdd
требовать
чтобы
тест
писаться
до
код
разработчик
это
код
tdd
не
требовать
чтобы
этот
задача
поручать
разработчик
который
не
уметь
писать
тест
вообще
лично
я
не
сторонник
tdd
я
писать
обычный
модульный
тест
после
код
плюс
иногда
высокоуровневый
тест
который
по
природа
скорее
относиться
к
bdd
хотя
я
так
и
не
проникнуться
bdd
шной
терминология
и
обычно
писать
этот
тест
в
тот
же
стиль
что
и
модульный
плюс
интеграционный
и
нагрузочный
по
необходимость
при
покрытие
код
качественно
написать
модульный
в
район
80
90
bdd
и
интеграционный
редко
приносить
дополнительный
польза
основный
польза
есть
только
от
нагрузочный
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
13
48
0
если
это
происходить
весь
время
скорее
всего
это
признак
тот
что
разработчик
ещё
не
научиться
нормальный
писать
тест
не
обязательно
вполне
мочь
быть
ситуация
что
меняться
высокоуровневый
требование
что
вести
к
переписывание
высокоуровневый
тест
да
тест
атомарный
элемент
тот
у
который
нет
зависимость
не
должный
попадать
в
ситуация
постоянный
переписывание
но
тест
более
сложный
сущность
композиция
несколько
атомарный
модуль
для
реализация
собственно
реальный
бизнесса
логика
вполне
мочь
постоянно
переписывиться
из
за
тот
что
требование
изменяться
и
уточняться
в
процесс
разработка
и
паралельной
эксплуатация
проблема
именно
в
это
отношение
тест
это
такой
же
код
они
тоже
надо
писать
достаточно
чисто
рефакторить
мы
весь
время
создавать
инструмент
который
ускорять
процесс
разработка
почему
вдруг
мы
не
должный
оптмизировать
время
на
тестирование
юнит
тест
именно
они
без
учёт
поведенческий
сам
по
себя
без
код
который
они
тестировать
не
приносить
никакой
польза
от
они
появляться
смысл
только
тогда
когда
есть
код
относиться
к
тест
так
же
как
и
к
код
иметь
смысл
только
при
работа
над
поведенческий
интеграционный
нагрузочный
тестирование
в
другой
случай
затрата
на
они
просто
никогда
не
окупиться
именно
поэтому
юнит
тест
часто
пропускаться
в
реальный
проект
я
же
пытаться
сделать
они
частью
процесс
разработка
давать
максимально
возможный
value
от
тест
при
минимальный
трудозатрата
tdd
не
требовать
чтобы
этот
задача
поручать
разработчик
который
не
уметь
писать
тест
идея
в
тот
что
бы
сделать
умение
писать
тест
максимально
близкие
к
умение
писать
код
в
такой
случай
не
быть
проблема
с
внедрение
тестирование
в
проект
потому
что
люба
джуна
смочь
не
только
написать
небольшой
кусочек
система
но
и
написать
на
он
тест
что
понизить
порог
вхождение
в
проект
и
повысить
он
общий
качество
вообще
лично
я
не
сторонник
tdd
судить
по
весь
у
мы
кардинально
разный
опыт
в
разработка
тестирование
я
никогда
не
видеть
качественный
покрытие
в
80
90
без
использование
tdd
или
выделение
отдельный
фаза
минимум
в
пара
месяц
в
зависимость
от
размер
проект
на
покрытие
код
тест
без
внедрение
новое
функционал
последний
вариант
я
встречать
вообще
только
1
раз
том
к
клиент
зачастую
не
готовый
платить
за
что
то
абстрактный
без
чёткий
понимание
ответ
на
вопрос
где
деньга
в
целое
один
из
идея
в
тот
что
бы
сделать
tdd
менее
формальный
спустить
он
с
уровень
процесс
до
уровень
инструмент
так
что
бы
тест
писаться
вместе
с
код
и
разделение
на
написание
тест
написание
код
потерять
смысл
habrastorage
org
getpro
habr
avatars
306
651
000
306651000e6f1aa26f308aa26d8b36ba_small
jpg
powerman
https
habrahabr
ru
users
powerman
12
04
18
в
20
09
0
не
обязательно
вполне
мочь
быть
ситуация
что
меняться
высокоуровневый
требование
что
вести
к
переписывание
высокоуровневый
тест
да
я
забыть
уточнить
что
иметь
в
вид
модульный
тест
в
другой
случай
затрата
на
они
просто
никогда
не
окупиться
это
чепуха
то
же
самый
можно
быть
бы
сказать
про
рефакторинг
раз
он
не
изменять
поведение
код
то
затрата
на
он
никогда
не
окупиться
оно
окупаться
как
раз
на
тот
что
качественно
написать
тест
переставать
весь
время
ломаться
я
никогда
не
видеть
качественный
покрытие
в
80
90
без
использование
tdd
или
выделение
отдельный
фаза
минимум
в
пара
месяц
в
зависимость
от
размер
проект
на
покрытие
код
тест
без
внедрение
новое
функционал
весь
банально
сначала
делаться
декомпозиция
и
получать
небольшой
модуль
который
писаться
за
2
4
день
после
что
ещё
пара
день
он
обвешиваться
юнит
тест
быть
в
тот
что
без
юнит
тест
написание
код
нельзя
считать
завершить
потому
что
не
протестировать
код
нерабочий
код
я
же
попросить
не
написать
функция
с
определённый
входной
выходной
значение
который
делать
что
то
неопределённый
а
написать
функция
который
делать
что
то
вполне
конкретный
как
без
юнит
тест
ни
раз
не
запустить
этот
функция
я
мочь
считать
поставить
я
задача
выполнить
такой
подход
вне
программирование
обычно
называться
халтура
представить
что
вы
в
магазин
попросить
300г
колбаса
a
а
вы
дать
тут
вроде
маленький
полкило
колбаса
взять
вроде
из
тот
отдел
где
обычно
лежать
в
том
число
и
a
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
20
39
0
я
не
предлагать
халтурить
я
не
предлагать
не
писать
тест
я
предлагать
тратить
минимальный
количество
время
на
получение
максимально
хорший
результат
и
да
для
что
то
близкий
к
bdd
где
тест
сам
по
себя
даже
в
отрыв
от
код
который
он
покрывать
представлять
ценность
отношение
должный
быть
такой
же
как
к
код
но
быть
в
тот
что
без
юнит
тест
написание
код
нельзя
считать
завершить
потому
что
не
протестировать
код
нерабочий
код
с
это
я
_полностью
согласен_
но
зачем
_
ещё
пара
день
он
обвешивать
юнит
тест
_
если
можно
создать
инструментарий
который
быть
требовать
на
это
только
пара
часы
и
то
если
делать
это
пост
фактум
хотя
можно
делать
и
паралельный
в
3
окно
1
код
2
использование
код
что
можно
назвать
входной
дать
3
постоянно
обновлять
результат
не
видеть
смысл
держаться
за
существующий
инструментарий
и
подход
когда
они
можно
улучшить
habrastorage
org
getpro
habr
avatars
306
651
000
306651000e6f1aa26f308aa26d8b36ba_small
jpg
powerman
https
habrahabr
ru
users
powerman
12
04
18
в
21
36
1
зачем
ещё
пара
день
он
обвешивать
юнит
тест
если
можно
создать
инструментарий
который
быть
требовать
на
это
только
пара
часы
я
на
это
уже
отвечать
в
самый
первое
комментарий
предлагать
инструментарий
привести
к
тот
что
в
тест
очень
часто
быть
некорректно
задать
ожидать
значение
это
не
вопрос
некорректный
инструмент
это
вопрос
психология
и
использовать
процесс
другой
дело
что
если
текущий
процесс
предполагать
в
95
тупой
копирование
ожидать
результат
из
вывод
провалиться
тест
в
код
вручную
тогда
ваш
инструмент
действительно
быть
полезный
для
оптимизация
текущий
процесс
только
вот
процесс
этот
на
мой
взгляд
проблемный
по
свой
природа
и
хороший
он
не
оптимизировать
инструмент
а
заменить
на
более
надёжный
habrastorage
org
getpro
habr
avatars
b6d
b8c
0bc
b6db8c0bccf142282786565fbb2e003a_small
jpg
zloddey
https
habrahabr
ru
users
zloddey
11
04
18
в
21
57
1
а
прикольный
чувак
переизобрести
approval
testing
в
целое
подход
неплохой
как
дополнение
к
остальной
инструмент
но
свой
ограничение
есть
и
у
он
стоить
только
просочиться
недетерминированность
в
тестировать
код
и
прощать
красота
прийтись
точно
так
же
обкладывать
код
тест
инфраструктурный
костыль
для
приведение
результат
к
приемлемый
вид
простеший
пример
как
протестировать
банальный
random
a
b
с
классический
юнит
тест
мы
мочь
к
пример
сделать
проверка
на
то
что
результат
лежать
между
a
и
b
а
также
что
при
несколько
вызов
подряд
получаться
разный
результат
этот
тест
быть
работать
стабильно
а
вариант
записать
результат
один
раз
затем
сравнивать
следующий
результат
с
он
уже
не
быть
работать
потому
что
честный
ранд
должный
возвращать
совсем
другой
значение
но
статья
поставить
плюс
если
разработчик
быть
уметь
использовать
разный
тип
автотест
наиболее
подходящий
образ
это
быть
хорошо
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
01
13
1
тут
есть
два
момент
1
сейчас
действительно
сложно
тестить
не
детерминированный
вещий
для
это
вестись
работа
над
таска
16
https
github
com
igmat
baset
issues
16
и
17
https
github
com
igmat
baset
issues
17
что
бы
дать
возможность
спокойно
мокнуть
ранд
или
тот
же
date
now
без
лишний
телодвижение
2
если
речь
идти
о
собственный
генератор
псевдослучайный
число
то
у
он
зачастую
есть
сид
значение
который
он
детерминировать
habrastorage
org
getpro
habr
avatars
306
651
000
306651000e6f1aa26f308aa26d8b36ba_small
jpg
powerman
https
habrahabr
ru
users
powerman
12
04
18
в
02
24
2
помимо
случайный
число
полно
другой
вещий
сейчас
большой
часть
код
выполняться
параллельно
по
крайний
мера
на
сервер
поэтому
нередко
предсказать
в
какой
порядок
быть
происходить
событие
и
приходить
дать
нельзя
в
принцип
приходиться
либо
они
вручную
искусственно
синхронизировать
или
упорядочивать
в
самый
тест
либо
писать
тест
в
стиль
быть
получить
от
2
х
до
5
ти
значение
среди
который
должный
быть
значение
x
либо
мокать
куча
всего
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
12
50
1
1
люба
тест
можно
привести
к
использование
equals
и
deepequals
если
нужный
именно
логика
быть
получить
от
2
х
до
5
ти
значение
среди
который
должный
быть
значение
x
то
вы
мочь
экспортировать
булевый
значение
который
принимать
true
именно
в
такой
условие
и
получить
тест
для
baset
2
такой
тест
выглядеть
весьма
странно
недетерминированный
поведение
модуль
это
уже
запашок
код
который
возвращать
разный
значение
возвращение
один
и
тот
же
результат
в
разный
порядок
это
по
суть
возвращение
разный
результат
для
один
и
тот
же
входной
параметр
потенциально
вести
к
огромный
количество
ошибка
поэтому
имхо
они
либо
нужно
синкатя
либо
разбивать
на
отдельный
модуль
либо
ещё
миллион
вариант
но
они
уже
зависеть
от
конкретный
задача
habrastorage
org
getpro
habr
avatars
306
651
000
306651000e6f1aa26f308aa26d8b36ba_small
jpg
powerman
https
habrahabr
ru
users
powerman
12
04
18
в
20
13
0
просто
задача
бывать
разный
представить
например
что
нужно
отправить
запрос
в
поисковый
кластер
поскольку
разный
узел
в
кластер
мочь
быть
недоступный
перегрузить
а
ответ
нужный
быстро
он
отправляться
параллельно
на
несколько
узел
кластер
том
е
дублироваться
разный
узел
мочь
иметь
разный
дать
eventual
consistency
поэтому
мочь
возвращать
немного
отличаться
результат
happy
testing
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
20
40
0
это
явно
не
кейс
для
юнит
тестирование
либо
же
кластер
должный
быть
мокнуть
habrastorage
org
getpro
habr
avatars
b6d
b8c
0bc
b6db8c0bccf142282786565fbb2e003a_small
jpg
zloddey
https
habrahabr
ru
users
zloddey
12
04
18
в
09
30
3
к
слово
просить
прощение
за
чувак
на
автомат
решить
что
это
перевод
уж
больно
часто
в
последний
время
видеть
именно
перевод
если
дело
касаться
большой
и
обстоятельный
статья
не
планировать
делать
комментарий
в
offensive
стиль
но
не
заметить
как
он
сам
по
себя
получиться
такой
отредактировать
уже
не
мочь
поэтому
делать
то
что
мочь
извиняться
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
12
42
1
ничто
страшный
технически
я
статья
сначала
писать
на
английский
а
потом
переводить
так
что
это
мочь
повлиять
на
ощущение
от
прочтение
habrastorage
org
getpro
habr
avatars
2d7
e54
213
2d7e542132fd35c93548b4a9f9f583da_small
jpg
retran
https
habrahabr
ru
users
retran
12
04
18
в
18
10
3
как
протестировать
банальный
random
справедливость
ради
банальный
random
вполне
себя
детерминировать
и
возвращать
один
и
тот
же
последовательность
число
при
один
и
тот
же
seed
реальный
недетерминированность
в
код
на
самый
дело
практически
нет
разве
что
какой
либо
race
condition
который
вообще
не
должный
быть
а
тестирование
конкуррентный
код
это
собственно
не
совсем
юнит
тестирование
habrastorage
org
getpro
habr
avatars
306
651
000
306651000e6f1aa26f308aa26d8b36ba_small
jpg
powerman
https
habrahabr
ru
users
powerman
12
04
18
в
20
16
0
детерминировать
обычный
гпсч
но
есть
ещё
криптый
гпсч
вроде
dev
urandom
там
нет
seed
ну
формально
есть
но
задать
он
в
тест
не
получиться
а
если
бы
и
получиться
то
толк
бы
весь
равно
не
быть
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
21
02
0
я
конечно
не
специалист
в
криптография
но
я
казалось
что
настоящий
случайность
требовать
специализировать
железо
а
весь
остальной
весь
равно
так
или
иначе
детерминировать
habrastorage
org
getpro
habr
avatars
306
651
000
306651000e6f1aa26f308aa26d8b36ba_small
jpg
powerman
https
habrahabr
ru
users
powerman
12
04
18
в
21
43
0
криптографически
стойкий
гпсч
постоянно
подмешивать
в
текущий
значение
seed
доступный
имя
энтропия
по
мера
поступление
этот
энтропия
она
браться
из
такой
непредсказуемый
вещий
как
событие
от
клавиатура
мышка
прерывание
сетевой
карта
http
man7
org
linux
man
pages
man7
random
7
html
sedyh
https
habrahabr
ru
users
sedyh
12
04
18
в
20
25
1
как
протестировать
банальный
random
a
b
закон
больший
число
при
большой
кола
ве
итерация
random
0
1
должный
выдавать
оба
значение
приблизительно
одиннаковый
кола
в
раз
oxidmod
https
habrahabr
ru
users
oxidmod
12
04
18
в
21
23
1
простеший
пример
как
протестировать
банальный
random
a
b
так
же
как
и
time
andreyverbin
https
habrahabr
ru
users
andreyverbin
12
04
18
в
03
12
3
по
мой
весь
обсуждение
тест
игнорировать
самый
важный
xp
и
tdd
после
он
быть
предложить
и
опробовать
в
проект
на
smalltalk
я
совсем
немного
писать
на
это
язык
и
самый
важный
что
сразу
бросаться
в
глаз
не
вы
запускать
программа
из
ide
а
ide
интегрировать
в
программа
вы
мочь
затем
ide
в
релиз
вырезать
как
результат
исчезать
понятие
компиляция
вы
просто
менять
метод
в
работать
программа
в
такой
среда
весь
внешний
зависимость
как
правило
тоже
доступный
проблема
сложный
сетап
исчезать
мока
почти
не
нужный
а
там
где
нужный
smalltalk
позволять
весь
легко
заменить
в
такой
среда
вы
действительно
мочь
эффективно
писать
тест
и
они
действительно
быть
очень
похожий
на
пример
код
причём
ваш
тест
быть
близкий
к
тот
что
называться
сейчас
интеграционный
работать
весь
быть
быстро
тест
ведь
запускаться
в
уже
работать
ide
программа
имхо
тестировать
нужно
только
то
что
мочь
вызвать
клиент
ваш
программа
по
возможность
избегать
мокова
и
тестирование
всякий
внутренний
штука
бизнес
мочь
и
меняться
очень
быстро
но
поль
форма
логин
и
логика
он
обработка
довольно
стабильный
то
же
касаться
и
другой
требование
никто
из
бухгалтерия
тракторный
завод
не
делать
изменение
более
менее
плавный
а
значит
и
формат
вход
и
выход
более
менее
стабильный
плюс
мы
платить
как
раз
за
то
чтобы
при
правильный
ввод
быть
правильный
вывод
это
и
надо
проверять
на
100
остальной
опциональный
я
это
подход
придерживаться
уже
5
год
и
с
тот
пора
полюбить
тест
до
это
в
течение
пять
год
пытаться
научиться
писать
правильный
юнит
тест
по
завет
из
книжка
результат
1
гора
мокова
время
файл
бд
сеть
ui
библиотека
работать
с
весь
перечисленный
тест
ведь
должный
быть
независимый
и
работать
быстро
что
делать
в
line
of
business
система
который
по
суть
прослойка
между
юзер
и
бд
особо
не
уточняться
2
куча
тест
на
каждый
модуль
класс
3
почти
0
баг
ловиться
тест
покрытие
80
4
тест
массово
валиться
при
маленький
рефакторинг
из
за
мокова
5
поддержка
тест
стоить
большой
поддержка
программа
а
если
работать
с
реальный
система
а
не
гора
мокова
то
тест
становиться
в
раз
маленький
и
они
работать
ловить
баг
и
кушать
особо
не
просить
areht
https
habrahabr
ru
users
areht
12
04
18
в
04
43
1
гора
мокова
время
файл
бд
сеть
ui
библиотека
работать
с
весь
перечисленный
если
у
вы
glue
code
да
на
он
юнит
тест
писать
занятие
неблагодарный
и
у
вы
же
небольшой
команда
habrastorage
org
getpro
habr
avatars
804
902
b51
804902b51bcbcaa57ba491fb2594fe36_small
jpg
kwolfy
https
habrahabr
ru
users
kwolfy
12
04
18
в
07
34
1
поддерживать
весь
сказать
выше
говорить
о
какой
либо
библиотека
где
связность
код
небольшой
юнит
тест
действительно
оправдывать
себя
но
если
мы
говорить
о
бизнес
проект
с
больший
количество
взаимозависимый
часть
намного
эффективный
писать
интеграционный
тест
жаль
только
мир
охватить
хайп
unit
тестирование
как
и
с
всякий
хайп
инструмент
использовать
везде
не
проводить
анализ
целесообразность
писать
тонна
тест
с
миллион
мокова
только
лишь
для
тот
чтобы
сказать
у
мы
95
покрытие
код
найтись
человек
который
сказать
что
за
зависимость
модуль
в
аду
отдельный
котёл
но
непонятно
как
они
строить
проект
без
зависимый
часть
реальный
проект
а
не
вот
мой
синтетический
проект
с
два
модель
весь
что
сказать
выше
относиться
к
проект
с
5
разработчик
направление
думать
unit
оправдывать
себя
в
больший
компания
где
над
каждый
модуль
работать
отдельный
команда
habrastorage
org
getpro
habr
avatars
306
651
000
306651000e6f1aa26f308aa26d8b36ba_small
jpg
powerman
https
habrahabr
ru
users
powerman
12
04
18
в
07
52
1
описать
говорить
о
тот
что
вы
успешно
освоить
вариант
тестирование
близкий
к
bdd
а
модульный
тестирование
пока
нет
один
проблема
с
высокоуровневый
тест
в
тот
что
они
проверять
только
типичный
способ
использование
и
при
это
обычно
вызываться
далеко
не
весь
написать
код
я
сейчас
даже
не
столько
про
формальный
цифра
покрытие
код
в
процент
сколько
про
тщательность
это
покрытие
если
код
быть
вызвать
то
это
ещё
не
означать
что
он
быть
вызвать
в
весь
стоящий
тестирование
вариант
и
не
означать
что
результат
он
работа
быть
действительно
тщательно
проверить
тест
другой
проблема
в
тот
что
без
мокова
почти
невозможно
потестировать
код
на
обработка
низкоуровневый
ошибка
вроде
сетевой
запрос
к
микросервис
отвалиться
по
таймаут
или
отвалиться
подключение
к
бд
результат
это
скорее
приёмочный
тест
который
говорят
о
тот
что
запросить
функционал
реализовать
и
выглядеть
относительно
рабочий
а
модульный
тест
отвечать
на
совсем
другой
вопрос
они
никак
не
мочь
подтвердить
что
приложение
реализовать
запросить
бизнес
функционал
зато
они
мочь
подтвердить
что
написать
программист
код
делать
именно
то
что
ожидать
этот
программист
и
делать
это
в
весь
возможный
ситуация
предусмотренный
программист
включая
всевозможный
ошибка
что
делать
в
line
of
business
система
который
по
суть
прослойка
между
юзер
и
бд
особо
не
уточняться
вообще
то
уточняться
делать
такой
архитектура
в
который
модуль
бизнес
логика
можно
выполнять
и
тестировать
вообще
без
ui
и
без
бд
а
ui
и
бд
делать
отдельный
модуль
с
свой
отдельный
тест
который
не
нужный
модуль
бизнес
логика
крайний
степень
это
подход
отлично
описать
дядюшка
боб
чистый
архитектура
https
habrahabr
ru
post
269589
не
обязательно
делать
весь
настолько
экстремально
чтобы
получить
тестировать
код
но
идея
примерно
такой
andreyverbin
https
habrahabr
ru
users
andreyverbin
13
04
18
в
00
21
0
основный
мысль
быть
в
тот
что
в
smalltalk
откуда
весь
это
идти
юнит
тест
очень
похожий
на
то
что
мы
называть
интеграционный
в
сила
особенность
среда
а
то
что
мы
делать
с
моками
это
в
большинство
случай
очень
вредный
действие
по
суть
ваш
ответ
заключаться
в
обсуждение
необходимый
степень
подробность
тест
это
я
и
прокомментировать
высокоуровневый
тест
действительно
не
сказать
вы
что
быть
если
отвалиться
сеть
можно
в
система
даже
внести
специальный
ручка
чтобы
такой
ошибка
генерировать
или
же
стаба
мока
использовать
в
такой
сценарий
я
предпочитать
ручка
потому
что
с
они
простой
работать
утверждение
готовый
доказать
как
теорема
чем
тщательный
мы
проверять
наш
код
тест
тем
большой
информация
о
наш
код
перетекать
в
тест
и
тем
сильный
он
связать
с
наш
код
чем
сильный
этот
связь
тем
сильный
нужно
менять
тест
при
изменение
наш
код
идеальный
тест
проверять
весь
возможный
состояние
позволить
мы
точно
восстановить
алгоритм
менее
идеальный
тест
позволить
восстановить
только
часть
пример
алгоритм
сортировка
qsort
если
мы
проверять
что
алгоритм
переключаться
на
bubble
sort
при
малое
размер
сортировать
диапазон
то
такой
тест
нужно
быть
убить
если
мы
переключиться
на
merge
sort
при
это
вход
и
выход
остаться
неизменный
клиент
это
код
быть
чаща
всего
весь
равно
жуткий
спекуляция
возможно
этот
эффект
можно
связать
с
эффект
ухудшение
качество
статистический
модель
при
превышение
определённый
порог
сложность
который
специфичный
для
задача
это
в
статистика
часто
бывать
и
в
ml
в
вид
переобучение
когда
модель
точно
повторять
дать
но
слишком
хрупкий
чтобы
эффективно
обобщать
реальность
я
это
весь
к
что
тест
задавать
неявный
модель
система
если
этот
модель
слишком
подробный
она
становиться
хрупкий
и
требовать
постоянный
подгонка
под
изменяться
система
мы
это
видеть
как
необходимость
переделывать
много
тест
при
изменение
система
к
сожаление
умный
книжка
не
давать
рекомендация
по
нахождение
оптимальный
подробность
или
тщательность
тест
для
задать
система
отсюда
и
весь
разговор
о
unit
vs
integration
vs
functional
vs
regression
vs
any
other
type
of
tests
мы
по
суть
нужный
теория
который
бы
позволить
определить
степень
подробность
тест
для
задать
система
и
требование
качество
пока
такой
теория
нет
я
плевать
на
разница
между
unit
не
unit
игнорировать
авторитет
и
пытаться
найти
оптимум
тщательность
путём
последовательный
приближение
ошибка
приближение
оценивать
по
степень
попаболь
от
тест
при
рефакторинг
система
habrastorage
org
getpro
habr
avatars
de0
9d8
1c7
de09d81c7d0f72a92dfa0d7f6e72d3a4_small
jpg
dmbreaker
https
habrahabr
ru
users
dmbreaker
12
04
18
в
08
28
0
только
пожалуйста
не
путать
unit
testing
и
tdd
это
существенно
разный
подход
к
tdd
большой
часть
описать
проблема
отношение
не
иметь
druu
https
habrahabr
ru
users
druu
12
04
18
в
10
12
0
тест
это
формализованный
требование
если
они
стабильный
это
верно
только
для
тест
по
тип
чёрный
ящик
что
чаща
всегда
неверный
для
tdd
habrastorage
org
getpro
habr
avatars
458
e5d
6b4
458e5d6b40bcac469de295298ab592e7_small
png
i360u
https
habrahabr
ru
users
i360u
12
04
18
в
13
06
1
tdd
примерно
раз
в
полтора
увеличивать
срок
разработка
на
это
обычно
контраргумент
являться
то
что
потом
время
быть
сэкономить
на
поддержка
и
развитие
однако
на
практика
часто
весь
выливаться
в
рефакторинг
с
новый
тест
который
дополнительно
отнимать
уйма
время
на
мой
взгляд
тест
должный
быть
покрыть
только
критический
часть
система
в
остальной
случай
это
никак
не
окупиться
особенно
в
небольшой
проект
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
14
09
0
собственно
один
из
задача
baset
https
github
com
igmat
baset
это
понизить
трудозатрата
на
тестирование
что
бы
в
больший
количество
случай
том
е
даже
в
небольшой
проект
они
мочь
принести
свой
бонус
в
вид
минимальный
док
и
больший
уверенность
в
работоспособность
система
habrastorage
org
getpro
habr
avatars
4b0
d6e
9c8
4b0d6e9c8adbdcb0fbc709348cdd017b_small
jpg
neikist
https
habrahabr
ru
users
neikist
12
04
18
в
14
12
1
хз
а
я
тест
помогать
наоборот
например
писать
тут
на
плюс
внешний
компонент
для
1с
без
тест
на
почти
незнакомый
язык
я
бы
задолбаться
выполнять
сборка
компонента
встраивание
в
1с
ручной
тестирование
а
с
тест
весь
пошло
гораздо
простой
и
быстрый
поскольку
обратный
связь
получать
почти
моментально
ну
и
для
самый
1с
применять
начать
немного
заметно
лёгкий
без
необходимость
перед
каждый
релиз
раз
в
два
неделя
проверять
автоматически
не
сломаться
ли
что
а
не
вручную
distortneo
https
habrahabr
ru
users
distortneo
12
04
18
в
15
22
0
весь
этот
мусор
из
инструмент
тестирование
и
assertion
библиотека
как
it
describe
test
to
be
true
просто
захламлять
ваш
тест
а
ещё
напрягать
лапша
из
код
у
тест
должный
быть
чёткий
структура
arrange
act
assert
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
17
22
0
хреновый
мочь
быть
написать
как
код
так
и
тест
проблема
в
тот
что
при
существующий
инструмент
правило
написание
код
отличаться
от
правило
написание
тест
в
то
время
как
в
baset
я
стараться
свести
этот
правило
воедино
justboris
https
habrahabr
ru
users
justboris
12
04
18
в
13
37
0
в
jest
есть
функциональность
snapshot
testing
https
facebook
github
io
jest
docs
en
snapshot
testing
html
там
делаться
то
же
самый
что
и
у
вы
значение
сохраняться
в
специальный
файл
при
следующий
запуск
результат
сравниваться
с
эталон
идея
хороший
но
такой
тест
недостаточно
чтобы
быть
уверенный
в
надёжность
свой
код
и
тест
нужный
ещё
более
чёткий
assertions
явно
говорящий
про
ожидать
результат
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
14
06
0
да
я
в
курс
про
snapshot
testing
но
это
узкоспециализоровать
фич
для
конкретный
случай
с
реакт
как
раз
в
подход
с
baseline
есть
чёткий
определение
ожидать
результат
как
я
уже
упоминать
люба
тест
можно
переписать
использовать
только
equals
deepequals
и
в
целое
такой
подход
очень
правильный
даже
для
уже
популярный
инструмент
тот
же
tape
https
github
com
substack
tape
собственно
ограничиться
необходимый
минимум
для
такой
тестирование
в
baset
https
github
com
igmat
baset
я
пойти
чуток
далёкий
если
тест
должный
ограничивиться
только
сравнение
с
ожидать
значение
то
хороший
избежать
ручной
задание
ожидание
разработчик
мочь
ошибиться
при
они
подсчёт
а
доверить
это
машина
который
потом
перепроверить
человек
и
так
довольно
часто
видеть
как
писаться
тест
общий
структура
потом
писаться
нетривиальный
код
браться
он
оутпуты
оцениваться
на
корректность
разработчик
и
вставляться
в
тест
как
ожидать
значение
тот
и
сам
так
делать
зачем
это
делать
рука
если
это
мочь
сделать
софт
а
мы
нужно
только
принять
или
не
принять
расчитать
значение
habrastorage
org
getpro
habr
avatars
1e8
c6a
2e7
1e8c6a2e7601571044760fe3e8a00d35_small
jpg
pterolex
https
habrahabr
ru
users
pterolex
12
04
18
в
19
51
0
да
я
в
курс
про
snapshot
testing
но
это
узкоспециализоровать
фич
для
конкретный
случай
с
реакт
почему
же
snapshot
тест
поддерживать
любой
значение
в
тот
число
immutable
js
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
20
04
0
потому
что
весь
равно
нужно
добавлять
разный
мусор
и
явно
делать
expect
tomatchsnapshot
import
react
from
react
import
link
from
link
react
import
renderer
from
react
test
renderer
it
renders
correctly
const
tree
renderer
create
link
page
http
www
facebook
com
facebook
link
tojson
expect
tree
tomatchsnapshot
более
тот
библиотека
не
построить
вокруг
это
функционал
а
он
просто
добавить
к
она
извне
для
покрытие
определённый
кейс
том
е
ни
резолвер
для
разный
тип
дать
этот
пример
https
habrahabr
ru
post
353312
neskolko
primerov
работать
как
раз
благодаря
он
ни
другой
аксептанс
стратегия
https
github
com
igmat
baset
issues
69
ни
использование
док
как
тест
https
github
com
igmat
baset
issues
11
или
тест
как
док
https
github
com
igmat
baset
issues
14
сразу
в
удобный
для
чтение
вид
ни
сайда
эффект
коллектор
https
github
com
igmat
baset
issues
15
не
мочь
быть
там
добавить
без
существенный
изменение
всего
инструмент
habrastorage
org
getpro
habr
avatars
a4b
6f5
ece
a4b6f5ecea37c9e1989da703f9731fb8_small
jpg
arvitaly
https
habrahabr
ru
users
arvitaly
12
04
18
в
14
42
2
нет
никакой
проблема
тестировать
чистый
функция
хоть
так
хоть
эдак
описать
ожидать
результат
основный
проблема
это
сайда
эффект
и
mock
объект
особенно
в
ооп
где
ссылочный
зависимость
мочь
быть
очень
больший
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
15
03
1
тут
полностью
согласный
хотя
имхо
тестирование
чистый
функция
в
baset
простой
чем
в
другой
инструмент
а
по
повод
сайда
эффект
1
для
pixi
js
http
www
pixijs
com
это
как
раз
и
быть
проблема
потому
что
главный
результат
рендеринг
они
displayobject
а
это
и
есть
побочный
эффект
но
посолька
я
понимать
что
подобный
быть
встречиться
быть
предусмотреть
api
для
специфический
резолвер
и
в
итог
реализация
pixi
resolver
https
www
npmjs
com
package
baset
resolver
pixi
быть
довольно
простой
и
потребовать
совсем
небольшой
кола
в
код
к
тот
же
в
план
реализовать
резолвера
для
весь
популярный
либ
для
реакт
уже
есть
https
www
npmjs
com
package
baset
resolver
react
ангуляр
в
ближний
перспектива
https
github
com
igmat
baset
issues
64
2
в
план
так
же
side
effects
collectors
api
https
github
com
igmat
baset
issues
15
реализация
самый
распростронить
кейс
тип
сериализация
результирть
dom
или
изменение
в
файловый
система
база
дать
удобный
апи
для
мокова
пока
нет
хотя
никто
не
мешать
делать
они
рука
но
оно
в
процесс
habrastorage
org
getpro
habr
avatars
29e
826
4a6
29e8264a6e4e9be52085a8513cab77b1_small
gif
alexey
lustin
https
habrahabr
ru
users
alexey
lustin
12
04
18
в
15
24
3
статья
действительно
нужно
поставить
плюс
потому
что
подниматься
верный
вопрос
что
уже
немаловажный
но
уж
коли
в
один
место
быть
упомянуть
серебряный
пуля
и
формулировка
tdd
ошибочно
я
прямо
вынужденный
прокоментировать
понимать
как
штука
bdd
tdd
cicd
code
coverage
linters
contionious
code
coverage
uat
и
другой
весёлый
аббревиатура
тип
atdd
они
в
целое
лежать
в
плоскость
качество
продукт
и
если
убрать
холивар
в
часть
что
хороший
tdd
bdd
или
atdd
мы
с
вы
в
целое
должный
говорить
о
тот
какой
методика
применяться
чтобы
не
накопить
технический
и
архитектурный
долг
что
по
умный
называться
qa
и
это
не
question
answers
вы
мочь
не
знаете
но
есть
тест
на
архитектура
приложение
и
линтер
для
архитектура
причём
как
и
тест
поведение
писаться
такой
тест
до
старт
проектирование
а
потом
ещё
и
проверяться
автоматически
на
сервер
сборка
проблема
который
вы
описать
в
статья
очень
похожий
на
проблема
который
описать
дэн
норт
в
свой
исходный
статья
про
dannorth
net
introducing
bdd
https
dannorth
net
introducing
bdd
в
проект
cucumber
js
в
целое
ваш
baseline
делаться
на
основа
scenarion
outline
и
examples
и
концепция
hooks
чтобы
генерировать
страница
собственно
в
этот
часть
даже
быть
эксперимент
мэта
вейный
выродиться
в
попытка
создать
даже
такой
сервис
relishapp
com
cucumber
cucumber
js
docs
world
constructor
callback
with
object
https
relishapp
com
cucumber
cucumber
js
docs
world
constructor
callback
with
object
то
есть
я
так
понимать
вы
потихоньку
прийти
и
к
bdd
и
к
live
documentation
наиболее
упороть
бехавойрист
делать
автоматически
gif
файл
демонстрировать
и
одновременно
проверять
поведение
если
подытожить
вы
затеять
хороший
и
интересный
проект
подписаться
на
он
p
s
серебряный
пуля
кстати
существовать
это
мороженный
из
тула
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
17
39
0
спасибо
за
такой
обстоятельный
и
позитивный
комментарий
bdd
в
целое
и
кукумбер
в
частность
я
быть
довольно
интересный
но
в
целое
это
поход
в
другой
сторона
и
я
не
считать
это
неправильный
просто
другой
bdd
это
движение
от
юнит
тест
к
более
высокий
уровень
абстракция
что
в
целое
очень
интерестно
и
делать
поведенческий
тест
настоящий
формализация
требование
в
что
имхо
крыться
огромный
кола
в
разный
плюс
но
bdd
это
процесс
к
тот
же
даже
в
больший
степень
чем
tdd
возможно
даже
в
больший
степень
чем
какой
нибыть
agile
scrum
это
не
плохо
и
не
хорошо
просто
требовать
достаточно
серъёзный
организационный
затрата
подключение
к
процесс
как
минимум
ba
том
е
это
весь
уже
выходить
далеко
за
рамка
просто
инструмент
для
разработчик
в
то
время
как
baset
это
наоборот
движение
от
процесс
tdd
к
простой
как
угол
дом
инструмент
и
да
в
baset
есть
амбиция
на
создание
в
тот
число
и
что
то
близкий
к
live
documentation
таска
11
https
github
com
igmat
baset
issues
11
и
14
https
github
com
igmat
baset
issues
14
если
я
правильно
понять
о
что
этот
термин
к
тот
же
если
baset
другой
фреймоврк
для
юнит
тестирование
тип
jest
mocha
tape
это
имхо
глупость
и
они
скорее
быть
мешать
друг
друг
то
baset
bdd
тот
же
кукумбер
вполне
мочь
дополнять
друг
друг
netch80
https
habrahabr
ru
users
netch80
12
04
18
в
16
50
0
в
2008
год
выйти
один
из
один
фреймворок
для
тестирование
видимо
это
только
для
javascript
потому
что
тут
https
shebanator
com
2007
08
21
a
brief
history
of
test
frameworks
например
говорят
про
1991
год
для
концепция
1994
для
неживой
сейчас
тулзов
тип
sunit
1998
для
junit
а
тут
http
wiki
c2
com
tenyearsoftestdrivendevelopment
про
1989
год
этот
дата
весь
таки
близкий
к
истина
хотя
думать
отдельный
реализация
в
доинтернетовсковать
эпоха
быть
и
сильно
ранний
очевидно
что
tdd
нельзя
назвать
ошибочный
но
я
думать
таки
можно
уже
писать
https
habrahabr
ru
post
324426
comment_10155006
на
хабра
и
в
другой
место
хотя
если
оборотный
стороной
фанатения
от
tdd
являться
массовый
вхождение
тестовый
фреймворок
в
обычный
практика
то
он
можно
похвалить
уже
за
это
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
18
00
1
да
речь
идти
о
первое
фреймоврка
для
js
наверное
стоить
уточнить
в
самый
статья
в
самый
статья
я
ссылаться
на
кент
бек
переоткрыть
tdd
в
1999
и
этот
любопытный
заметка
https
www
quora
com
why
does
kent
beck
refer
to
the
rediscovery
of
test
driven
development
whats
the
history
of
test
driven
development
before
kent
becks
rediscovery
про
возраст
tdd
сам
же
юнит
тестирование
я
считать
от
появление
tap
https
en
wikipedia
org
wiki
test_anything_protocol
в
1987
том
е
даже
ранний
чем
указанный
вы
1989
но
быть
быть
не
в
полный
энциклопедический
достоверность
а
в
тот
что
бы
показать
что
этот
подход
существовать
уже
очень
давно
долгий
чем
я
жить
например
_а
теперь
от
история
к
действительно
важный
_
прочитать
тот
ваш
прошлогодний
коммент
жаль
не
мочь
лайк
поставить
том
к
срок
голосование
истечь
в
целое
согласный
поэтому
и
написать
следующий
значит
tdd
весь
таки
ошибочно
нет
tdd
не
ошибочно
оно
указывать
правильно
направление
и
поднимать
важный
вопрос
мы
просто
должный
переосмыслить
и
изменить
способ
он
применение
и
в
baset
https
github
com
igmat
baset
я
хотеть
добиться
не
использование
правило
test
first
а
просто
написание
тест
и
код
по
суть
паралельный
что
кстати
вроде
довольно
неплохо
быть
ложиться
на
тот
_наукоемкие_
пример
что
вы
приводить
у
себять
habrastorage
org
getpro
habr
avatars
1bd
e34
859
1bde34859752fa04caa1f3af52da8942_small
jpg
ganqqwerty
https
habrahabr
ru
users
ganqqwerty
12
04
18
в
18
44
0
tdd
родиться
в
золотой
век
каскадный
модель
вроде
ж
в
1998
уже
rational
unified
process
появиться
и
водопад
хаять
весь
кома
не
лень
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
19
09
0
4
ое
издание
pmbok
в
который
впервые
отойти
от
каскадный
модель
в
сторона
гибридный
то
есть
признать
достижение
гибкий
методология
выйти
только
в
2008
год
так
что
имхо
весь
время
до
это
момент
весь
ещё
золотой
век
водопад
несмотря
на
то
что
итеративный
методология
использоваться
и
задолго
до
это
но
это
не
быть
так
распространенно
ntsdk
https
habrahabr
ru
users
ntsdk
12
04
18
в
20
23
0
большой
проблема
тест
заключаться
в
дороговизна
они
разработка
и
поддержка
поскольку
тест
тест
рознь
то
можно
посмотреть
на
дешёвый
вид
тестирование
к
таковой
я
относить
1
статический
анализ
несмотря
на
то
что
eslint
вообще
говорить
не
про
тестирование
он
мочь
выявлять
ошибка
вид
дать
функция
в
это
контекст
нету
2
smoke
тест
да
они
много
не
натестировать
но
это
намного
хороший
чем
ничто
3
развитие
идея
snapshot
тест
вот
у
мы
есть
что
то
что
требовать
тестирование
мы
нужно
это
сверить
с
чем
то
вопрос
с
чем
один
из
вариант
у
вы
есть
старый
версия
система
и
новый
у
вы
есть
внутри
функция
на
нея
вы
ставить
перехватчик
который
складывать
в
база
дать
запись
функция
на
аргумент
такой
дать
результат
такой
накопить
результат
с
старый
версия
и
стать
сверять
с
результат
перехватчик
с
тот
же
функция
в
новый
версия
возможно
у
это
подход
уже
есть
свой
умный
название
но
я
не
встречать
habrastorage
org
getpro
habr
avatars
427
15b
0f8
42715b0f81a5b7e5495d5f8895ba885c_small
png
igmat
https
habrahabr
ru
users
igmat
12
04
18
в
20
59
0
1
тут
ещё
можно
добавить
typescript
https
www
typescriptlang
org
хотя
этот
инструмент
тоже
совсем
не
про
тестирование
2
многие
интеграционный
тест
похожий
на
смока
3
так
baset
https
github
com
igmat
baset
в
какой
то
смысл
именно
про
это
более
тот
в
он
уже
даже
есть
функция
генерация
использование
https
github
com
igmat
baset
usage
команда
scaffold
правда
она
совсем
сырой
и
требовать
ещё
очень
много
доработка
https
github
com
igmat
baset
issues
66
так
что
присоединяться
если
я
ваш
мысль
правильно
понять
только
полноправный
пользователь
info
help
registration
мочь
оставлять
комментарий
войти
https
habrahabr
ru
auth
login
пожалуйста
что
обсуждать
сейчас
вчера
неделя
научный
программирование
часть
1
https
habrahabr
ru
post
353408
2
7k
88
https
habrahabr
ru
post
353408
comments
linux
контейнер
изоляция
как
технологический
прорыв
https
habrahabr
ru
company
redhatrussia
blog
352052
5
4k
1
https
habrahabr
ru
company
redhatrussia
blog
352052
comments
кроме
криптовалюта
для
что
ещё
использоваться
блокчейн
https
habrahabr
ru
company
bitfury
blog
353350
3
9k
3
https
habrahabr
ru
company
bitfury
blog
353350
comments
не
защищать
сайт
от
скрапинга
сопротивление
бесполезный
https
habrahabr
ru
post
353348
8
6k
63
https
habrahabr
ru
post
353348
comments
holey
beep
найти
критический
уязвимость
в
биперо
linux
https
habrahabr
ru
company
1cloud
blog
353374
2
8k
9
https
habrahabr
ru
company
1cloud
blog
353374
comments
научный
программирование
часть
1
https
habrahabr
ru
post
353408
2
7k
88
https
habrahabr
ru
post
353408
comments
не
защищать
сайт
от
скрапинга
сопротивление
бесполезный
https
habrahabr
ru
post
353348
8
7k
63
https
habrahabr
ru
post
353348
comments
и
ты
посчитать
в
россия
грясти
всеобщий
маркировка
товар
https
habrahabr
ru
company
pilot
blog
353344
6
2k
33
https
habrahabr
ru
company
pilot
blog
353344
comments
особенность
использование
вещественный
регистр
x86
архитектура
https
habrahabr
ru
company
simbirsoft
blog
353182
3k
9
https
habrahabr
ru
company
simbirsoft
blog
353182
comments
holey
beep
найти
критический
уязвимость
в
биперо
linux
https
habrahabr
ru
company
1cloud
blog
353374
2
8k
9
https
habrahabr
ru
company
1cloud
blog
353374
comments
мессенджер
пора
делать
следующий
шаг
https
habrahabr
ru
post
352986
31
6k
220
https
habrahabr
ru
post
352986
comments
firefox
gecko
который
мы
потерять
https
habrahabr
ru
post
353290
16
4k
186
https
habrahabr
ru
post
353290
comments
как
пользователь
учить
яндекс
предупреждать
о
телефонный
спам
https
habrahabr
ru
company
yandex
blog
353210
18
8k
167
https
habrahabr
ru
company
yandex
blog
353210
comments
диванный
вица
президент
как
я
работать
директор
по
продукт
на
полный
удалёнка
https
habrahabr
ru
company
crossover
blog
353196
11
4k
138
https
habrahabr
ru
company
crossover
blog
353196
comments
почему
означать
присваивание
https
habrahabr
ru
post
353292
22
4k
125
https
habrahabr
ru
post
353292
comments
самый
читаемый
сутки
неделя
месяц
не
защищать
сайт
от
скрапинга
сопротивление
бесполезный
https
habrahabr
ru
post
353348
plus
21
8
7k
55
63
https
habrahabr
ru
post
353348
comments
визуализация
связь
процесс
в
linux
https
habrahabr
ru
post
353322
plus
51
12
2k
191
18
https
habrahabr
ru
post
353322
comments
tdd
ошибочно
https
habrahabr
ru
post
353312
plus
54
13
6k
97
47
https
habrahabr
ru
post
353312
comments
и
ты
посчитать
в
россия
грясти
всеобщий
маркировка
товар
https
habrahabr
ru
company
pilot
blog
353344
plus
15
6
2k
10
33
https
habrahabr
ru
company
pilot
blog
353344
comments
firefox
gecko
который
мы
потерять
https
habrahabr
ru
post
353290
plus
19
16
4k
33
186
https
habrahabr
ru
post
353290
comments
осторожный
с
копипаст
фингерпринтинг
текст
непечатаемый
символ
https
habrahabr
ru
post
352950
plus
101
31
7k
303
96
https
habrahabr
ru
post
352950
comments
мессенджер
пора
делать
следующий
шаг
https
habrahabr
ru
post
352986
plus
18
31
6k
82
220
https
habrahabr
ru
post
352986
comments
почему
означать
присваивание
https
habrahabr
ru
post
353292
plus
97
22
4k
59
125
https
habrahabr
ru
post
353292
comments
манипуляция
поисковый
выдача
google
https
habrahabr
ru
post
352976
plus
44
21
6k
51
31
https
habrahabr
ru
post
352976
comments
почему
в
2018
год
я
использовать
метод
разработка
который
уже
30
год
https
habrahabr
ru
post
353214
plus
27
21
2k
73
29
https
habrahabr
ru
post
353214
comments
мы
найти
крупный
компания
который
5
год
не
заниматься
информационный
безопасность
и
она
ещё
живой
https
habrahabr
ru
company
croc
blog
352044
plus
30
80
4k
119
97
https
habrahabr
ru
company
croc
blog
352044
comments
как
red
hat
убить
свой
главный
продукт
и
стать
многомиллиардный
корпорация
https
habrahabr
ru
company
redhatrussia
blog
351170
plus
89
67
8k
105
68
https
habrahabr
ru
company
redhatrussia
blog
351170
comments
дискредитация
специалист
или
современный
собеседование
https
habrahabr
ru
post
352246
plus
77
62
4k
154
676
https
habrahabr
ru
post
352246
comments
bugbounty
раскрытие
5
миллион
ссылка
в
приватный
чат
telegram
и
возможность
редактирование
люба
статья
telegra
ph
https
habrahabr
ru
post
347910
plus
116
58
7k
172
72
https
habrahabr
ru
post
347910
comments
где
хороший
жить
программист
сравнивать
9
страна
https
habrahabr
ru
post
352718
plus
49
52
3k
230
398
https
habrahabr
ru
post
352718
comments
интересный
публикация
хабрахабра
geektimes
флаппи
бёрдо
поехать
https
habrahabr
ru
post
353402
plus
10
860
12
0
https
habrahabr
ru
post
353402
comments
законопроект
о
срочный
удаление
незаконный
сообщение
из
соцсеть
пройти
первое
чтение
в
госдума
https
geektimes
ru
post
299929
gt
https
geektimes
ru
plus
7
2
1k
3
22
https
geektimes
ru
post
299929
comments
разбор
основный
концепция
параллелизм
https
habrahabr
ru
post
353414
plus
9
1
3k
45
1
https
habrahabr
ru
post
353414
comments
holey
beep
найти
критический
уязвимость
в
биперо
linux
https
habrahabr
ru
post
353374
plus
12
2
8k
12
9
https
habrahabr
ru
post
353374
comments
как
энтузиаст
получить
радиолюбительский
позывной
и
начать
праздновать
18
апрель
https
geektimes
ru
post
299925
gt
https
geektimes
ru
plus
10
1
7k
20
8
https
geektimes
ru
post
299925
comments
riot
games
анатомия
технический
долг
https
habrahabr
ru
post
353346
plus
8
1
9k
23
3
https
habrahabr
ru
post
353346
comments
инновация
в
ссср
история
про
то
новосибирский
академгородок
который
мочь
бы
стать
советский
кремнёвый
долина
https
geektimes
ru
post
299923
gt
https
geektimes
ru
plus
15
2
1k
7
4
https
geektimes
ru
post
299923
comments
в
сша
впервые
разрешить
ия
проводить
диагностик
человек
без
участие
врач
https
geektimes
ru
post
299921
gt
https
geektimes
ru
plus
10
1
3k
7
1
https
geektimes
ru
post
299921
comments
транскрипция
двенадцать
выпуск
подкаста
прокуратор
https
habrahabr
ru
post
353398
plus
21
970
6
0
https
habrahabr
ru
post
353398
comments
медведев
предложить
запретить
покупка
американский
товар
https
geektimes
ru
post
299919
gt
https
geektimes
ru
plus
16
8
2k
7
86
https
geektimes
ru
post
299919
comments
adblock
похитить
этот
баннер
но
баннер
не
зуб
отрасти
дробный
https
u
tmtm
ru
tmtalkadblock
реклама
https
tmtm
ru
services
advertising
аккаунт
войти
https
habrahabr
ru
auth
login
регистрация
https
habrahabr
ru
auth
register
раздел
публикация
https
habrahabr
ru
posts
top
хаба
https
habrahabr
ru
hubs
компания
https
habrahabr
ru
companies
пользователь
https
habrahabr
ru
users
песочница
https
habrahabr
ru
sandbox
информация
правило
info
help
rules
помощь
info
help
документация
info
topics
madskillz
соглашение
https
id
tmtm
ru
info
agreement
конфиденциальность
https
id
tmtm
ru
info
confidential
услуга
реклама
https
tmtm
ru
services
advertising
тариф
https
tmtm
ru
services
corpblog
контент
https
tmtm
ru
services
content
семинар
https
tmtm
ru
workshops
приложение
https
appmetrica
yandex
com
serve
240693928167260216
utm_source
hh_desktop
utm_medium
button
utm_campaign
appios
https
appmetrica
yandex
com
serve
745097116363323173
id
ru
habrahabr
utm_source
hh_desktop
utm_medium
button
utm_campaign
appandroid
c
2006
2018
tm
https
tmtm
ru
о
сайт
info
about
служба
поддержка
https
habrahabr
ru
feedback
мобильный
версия
https
m
habrahabr
ru
post
353312
mobile
yes
https
twitter
com
habrahabr
https
www
facebook
com
habrahabr
ru
https
vk
com
habr
https
telegram
me
habr_ru
https
www
youtube
com
channel
ucd_stwkqvrwett4oaky5y4w
mc
yandex
ru
watch
24049213
